@using Entities;
@using Business.Services;
@using Business.Interfaces;
@inject IServices<Product> ProductService;
@inject IServices<Category> CategoryService;
@inject NavigationManager NavManager;

<EditForm Model="product">
    <div class="form-group">
        <label>Nombre</label>
        <InputText class="form-control" @bind-Value="product.Name"></InputText>
    </div>
    <div class="form-group">
        <label>Categoría</label>
        <InputSelect class="form-control" @bind-Value="product.CategoryId">
            @foreach (var item in categories)
           {
               <option value="@item.Id">@item.Name</option>
           }
        </InputSelect>
    </div>
    <div class="form-group">
        <label>Descripción</label>
        <InputTextArea class="form-control" @bind-Value="product.Description"></InputTextArea>
    </div>
    <div class="form-group">
        <label>Cantidad</label>
        <InputNumber class="form-control" @bind-Value="product.Count"></InputNumber>
    </div>
    <div class="form-group">
        <button @onclick="Save" class="btn btn-primary">Guardar</button>
    </div>
</EditForm>

@code {
    [Parameter]
    public string Id { get; set; }

    Product product = new Product();
    List<Category> categories = new List<Category>();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        categories = CategoryService.GetAll();
        product = ProductService.GetById(Id);
    }

    private void Save()
    {
        ProductService.Update(product);
        NavManager.NavigateTo("/product/list");
    }
}

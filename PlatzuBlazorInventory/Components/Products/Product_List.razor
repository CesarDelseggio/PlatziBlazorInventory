@using Entities;
@using Business.Interfaces;

@inject IServices<Category> CategoryService;
@inject IServices<Product> ProductService;

<hr />
    <a href="/product/create">Crear</a>
<hr />

<hr />
    <select class="form-control" @onchange="CategoryChange">
        <option value="Todas">Todas</option>
        @foreach (var item in Categories)
        {
            <option value="@item.Id">@item.Name</option>  
        }
    </select>
<hr />

<table class="table table-hover table-bordered">
    <thead>
        <tr>
            <th>Código</th>
            <th>Nombre</th>
            <th>Categoría</th>
            <th>Cantidad</th>
            <th>Acción</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Products)
        {
            <tr>
                <td>@item.Id</td>
                <td>@item.Name</td>
                <td>@item.CategoryId</td>
                <td>@item.Count</td>
                <td><a href="product/update/@item.Id">Editar</a></td>
            </tr>   
        }
    </tbody>
</table>


@code {
    List<Category> Categories = new List<Category>();
    List<Product> Products = new List<Product>();
    List<Product> ProductsAux = new List<Product>();

    string message = "";

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        Categories = CategoryService.GetAll();
        Products = ProductsAux = ProductService.GetAll();
    }

    private void CategoryChange(ChangeEventArgs e)
    {
        if (e.Value.ToString() == "Todas")
        {
            Products = ProductsAux.ToList();
            return;
        }

        Products = ProductsAux
                    .Where(x=>x.CategoryId == e.Value.ToString())
                    .ToList();
    }

}
